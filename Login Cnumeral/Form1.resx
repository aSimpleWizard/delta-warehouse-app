<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIyMAAAEAIABkFAAAFgAAACgAAAAjAAAARgAAAAEAIAAAAAAAJBMAAGDqAABg6gAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGOQAGBjkABgY5AAYGOQAGBjkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGOQAGBjkABgY5AAYGOQAGBjkABgY5AAYGOQAGBjkABgY5AAYG
        OQAGBjkNBgY5AQYGOQAGBjkABgY5AAYGOQAGBjkABgY5AAYGOQAGBjkABgY5AAYGOQAGBjkABgY5AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBjkABgY5AAYGOQAGBjkABgY5AAYG
        OQAGBjkABgY5AAYGOQEGBjkABgY5MgYGObYGBjlZBgY5AAYGOQEGBjkABgY5AAYGOQAGBjkABgY5AAYG
        OQAGBjkABgY5AAYGOQAGBjkABgY5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgY5AAYG
        OQAGBjkABgY5FgYGOWIGBjmRBgY5lwYGOZcGBjmZBgY5aQYGOTsGBjnNBgY5/wYGOekGBjlZBgY5TgYG
        OZcGBjmXBgY5lwYGOZcGBjmXBgY5lwYGOY4GBjlhBgY5HAYGOQAGBjkABgY5AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGBjkABgY5AAYGOSQGBjm6BgY5/gYGOf8GBjn/BgY5/wYGOdMGBjlrBgY5zQYG
        Of8GBjn/BgY5/wYGOegGBjl1BgY5sAYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf4GBjnOBgY5SQYG
        OQAGBjkABgY5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGOQAGBjkFBgY5nQYGOf8GBjn/BgY5/wYG
        Of8GBjnoBgY5aQYGOcwGBjn/BgY5/wYGOf8GBjn/BgY5/wYGOekGBjltBgY5xgYGOf8GBjn/BgY5/wYG
        Of8GBjn/BgY5/wYGOf8GBjngBgY5NwYGOQAGBjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgY5AAYG
        OSIGBjngBgY5/wYGOf8GBjn/BgY5/wYGOeIGBjljBgY5kAYGOe0GBjn/BgY5/wYGOf8GBjn7BgY5pwYG
        OWIGBjm+BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjmkBgY5BQYGOQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGBjkABgY5LAYGOeoGBjn/BgY5/wYGOf8GBjn/BgY5/wYGOdgGBjlgBgY52AYG
        Of8GBjn/BgY5/wYGOfYGBjllBgY5ugYGOfwGBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYG
        Od4GBjkfBgY5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGOQAGBjkVBgY5zgYGOf8GBjn/BgY5/wYG
        Of8GBjn/BgY5/QYGOXoGBjnYBgY5/wYGOf8GBjn/BgY59QYGOXMGBjnnBgY5/wYGOf8GBjn/BgY5/wYG
        Of8GBjn/BgY5/wYGOf8GBjn/BgY56gYGOS0GBjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgY5AAYG
        OQAGBjlpBgY59gYGOf8GBjn/BgY5/wYGOf8GBjn7BgY5eQYGOdgGBjn/BgY5/wYGOf8GBjn1BgY5cgYG
        OeUGBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjneBgY5IAYGOQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGBjkABgY5AAYGOQgGBjmiBgY5/wYGOf8GBjn/BgY5/wYGOfsGBjl4BgY52wYG
        Of8GBjn/BgY5/wYGOfkGBjlzBgY55AYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYG
        OaYGBjkFBgY5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGOQAGBjkABgY5CAYGObYGBjn/BgY5/wYG
        Of8GBjn/BgY5/gYGOYEGBjmPBgY5rwYGOa4GBjmuBgY5owYGOWgGBjntBgY5/wYGOf8GBjn/BgY5/wYG
        Of8GBjn/BgY5/wYGOf8GBjniBgY5OQYGOQAGBjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYG
        OQAGBjkFBgY5pgYGOf8GBjn/BgY5/wYGOf8GBjn/BgY54AYGOaAGBjmbBgY5mwYGOZsGBjmbBgY5zAYG
        Of8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn+BgY50QYGOUwGBjkABgY5AAYGOQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABgY5AAYGOQAGBjkvBgY5tAYGOfgGBjn/BgY5/wYGOf8GBjn/BgY5/wYG
        Of8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOfMGBjmmBgY5lgYGOWYGBjkfBgY5AAYG
        OQAGBjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBjkABgY5AAYGOQAGBjkfBgY52gYG
        Of8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY52AYG
        OV4GBjmMBgY5CwYGOQAGBjkABgY5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGBjkABgY5AAYGOREGBjnLBgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYG
        Of8GBjn/BgY5/wYGOf8GBjmSBgY5owYGOdgGBjkUBgY5AAYGOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBjkABgY5AQYGOZkGBjn/BgY5/wYGOf8GBjn/BgY5/wYG
        Of8GBjn/BgY5/wYGOf8GBjn2BgY5wAYGOdsGBjnXBgY5kwYGOXcGBjnyBgY50wYGORQGBjkABgY5AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGOQAGBjkABgY5PAYG
        OeoGBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjn/BgY5/wYGObMGBjkRBgY5NQYGOXYGBjmgBgY57wYG
        Of8GBjnRBgY5EQYGOQAGBjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABgY5AAYGOQAGBjkBBgY5bgYGOfMGBjn/BgY5/wYGOf8GBjn/BgY5/wYGOf8GBjnQBgY5MQYG
        OU0GBjmpBgY5+gYGOf8GBjn/BgY5/wYGOekGBjmIBgY5JgYGOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgY5AAYGOQAGBjkEBgY5VwYGOccGBjn0BgY5/gYG
        OfwGBjnpBgY5ogYGOSsGBjkABgY5XgYGOfEGBjn/BgY5/wYGOf8GBjn/BgY5/wYGOccGBjkjBgY5AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBjkABgY5AAYG
        OQAGBjkABgY5EwYGOUAGBjlcBgY5VQYGOS8GBjkGBgY5AAYGOQAGBjkBBgY5YgYGOe4GBjn/BgY5/wYG
        Of8GBjnFBgY5KQYGOQAGBjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABgY5AAYGOQAGBjkABgY5AAYGOQAGBjkABgY5AAYGOQAGBjkABgY5AAYG
        OQAGBjkBBgY5YgYGOe4GBjn/BgY5xQYGOSkGBjkABgY5AAYGOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABgY5AAYGOQAGBjkBBgY5YwYGObMGBjkrBgY5AAYGOQAGBjkAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBjkABgY5AAYGOQAGBjkCBgY5DAYG
        OQAGBjkABgY5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABgY5AAYGOQAGBjkABgY5AAYGOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////+AAAAD/////4AAAAP//
        ///gAAAA/////+AAAAD/////4AAAAP/4P//gAAAA+AAAB+AAAADwAAAD4AAAAOAAAAHgAAAA4AAAAOAA
        AADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAPAA
        AADgAAAA8AAAAeAAAADwAAAD4AAAAPgAAAfgAAAA/AAAB+AAAAD8AAAH4AAAAPwAAAfgAAAA/gAAB+AA
        AAD+AAAH4AAAAP+AAAfgAAAA///gD+AAAAD//+Af4AAAAP//+D/gAAAA/////+AAAAD/////4AAAAP//
        ///gAAAA/////+AAAAD/////4AAAAA==
</value>
  </data>
</root>